@page "/category"
@using CmsWebsite.Client.Blazor.Services.Category
@using CmsWebsite.Share.Models.Category
@using System.Text.Json
@inject ICategoryService _client
@inject NavigationManager uriHelper
@inject DialogService DialogService
@inject NotificationService NotificationService
@if (Categories == null)
{
    <p>Loading Categories</p>
}
else
{
    <div class="container-fluid">
        <div class="row mb-3">
            <div class="col">
                <RadzenButton Click=@(arg => uriHelper.NavigateTo("category/create")) Text="Thêm loại bài viết" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
            </div>
        </div>
        <div class="">
            <RadzenDataGrid @ref="grid0" AllowFiltering="true" AllowColumnResize="true"
                        FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="7"
                        AllowPaging="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        ShowPagingSummary="true"
                        Data="@Categories" TItem="CategoryDTO" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="CategoryDTO" Title="Ảnh Icon" Width="80px">
                        <Template Context="data">
                            <RadzenImage Path="@data.IconFile" style="width: 70px; height: 70px; border-radius: 8px;" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="CategoryDTO" Property="CategoryName"
                                      Title="Tên loại bài viết" Width="140px" />
                    <RadzenDataGridColumn TItem="CategoryDTO" Property="ParentCategoryId"
                                      Title="Thuộc loại" Width="140px" />
                    <RadzenDataGridColumn TItem="CategoryDTO" Property="Level"
                                      Title="Cấp độ hiển thị" Width="140px" />
                    <RadzenDataGridColumn Width="140px" Filterable="false" TItem="CategoryDTO" Property="isDeleted"
                                      Title="Tạm ẩn">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=@data.isDeleted Name="isDeleted" TValue="bool"
                                        Change="@((args) => IsDeleted(data.CategoryId, args))" />
                            <RadzenLabel Text="Tạm ẩn" Component="isDeleted" Style="margin-left: 8px; vertical-align: middle;" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="CategoryDTO" Filterable="false" Sortable="false" Property="Edit" TextAlign="TextAlign.Center" Width="120px">
                        <Template Context="data">
                            <RadzenButton Class="m-1" ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="edit"
                                      Click="@((args) => EditRow(data.CategoryId))" @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                    @*<RadzenDataGridColumn TItem="CategoryDTO" Context="order" Filterable="false" Property="Delete" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                        <Template Context="data">
                        <RadzenButton Class="m-1" ButtonStyle="ButtonStyle.Danger" Icon="delete"
                        Click="@((args) => DeleteRow(data.CategoryId))" @onclick:stopPropagation="true" />
                        </Template>
                        </RadzenDataGridColumn>*@

                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
}
@code {
    protected List<CategoryDTO> Categories { get; set; }
    protected RadzenDataGrid<CategoryDTO> grid0;
    protected override async Task OnInitializedAsync()
    {
        Categories = await _client.GetListCategory();
    }
    protected void EditRow(Guid id) => uriHelper.NavigateTo($"category/edit/{id}");

    protected async Task IsDeleted(Guid id, bool isDeleted)
    {

        try
        {
            var deleted = await _client.DeleteCategory(id, isDeleted);
            var deletedMessage = (isDeleted) ? "Ẩn" : "Hiển thị";
            if (deleted)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Thông báo sự kiện",
                        Detail = $"{deletedMessage} bài viết!",
                        Duration = 2000,
                    });
            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Thông báo sự kiện",
                    Detail = $"{ex}",
                    Duration = 4000
                });
        }
    }
}
