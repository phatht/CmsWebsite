@page "/category/create"

@using CmsWebsite.Client.Blazor.Services.Category
@using System.Text.Json
@using CmsWebsite.Share.Models.Category
@using System.Net.Http.Headers
@inject NavigationManager uriHelper
@inject ICategoryService _categoryService
@inject NotificationService NotificationService

@*
    TItem: truyền 1 class, đối tượng request để hiển thị dữ liệu
    Data: truyền 1 biến object để bind dữ liệu
    Submit: truyền 1 function
*@
<div class="container-fluid">
    <div class="row">
        <RadzenTemplateForm TItem="CategoryCreateRequest" Data="@category" Submit=@Createcategory>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="row my-3">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Component="CategoryName" Text="Tên loại bài viết: " />
                    </div>
                    <div class="col-md-9">
                        <RadzenTextBox Placeholder="Nhập loại bài viết" Name="CategoryName" @bind-Value="@category.CategoryName"
                                       Style="width:100%;" />
                        <ValidationMessage For="@(() => category.CategoryName)" />

                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Component="ParentCategoryId" Text="Thuộc loại bài viết" />
                    </div>
                    <div class="col-md-9">
                        <RadzenDropDown Name="ParentCategoryId" AllowClear="true" Style="width:100%;"
                                        Data="@categories" TextProperty="CategoryName" ValueProperty="CategoryId"
                                        @bind-Value=@category.ParentCategoryId Placeholder="Chọn loại bài viết.." />

                    </div>
                </div>
                @*<div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="Level" Text="Level" />
                    </div>
                    <div class="col-md-9">
                    <RadzenDropDown Name="Level" Data="@MyLevels" TextProperty="EnumName" ValueProperty="EnumValue"
                    @bind-Value=@category.Level Placeholder="Select Level..." />

                    </div>
                    </div>*@
                <div class="row my-3">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Component="IconFile" Text="Icon" />
                    </div>
                    <div class="col-md-9">
                        <RadzenImage Path=@($"{ImgUrl}") Style="max-width: 100%; display: block; margin-bottom: 5px;" />
                        <InputFile OnChange="@HandleSelected" accept=".jpg, .jpeg, .png" />
                        <ValidationMessage For="@(() => category.IconFile)" />
                    </div>
                </div>
                <div class="row my-3 justify-content-center">
                    <div class="col-md-3  d-flex align-items-end justify-content-center">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Lưu" />
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Style="display: inline-block; margin-left: 10px;" ButtonType="ButtonType.Button" Click=@Back Text="Trở về" />
                    </div>
                </div>
            </div>
        </RadzenTemplateForm>
    </div>
</div>


@code {
    //[Inject] private IcategoryService _client { get; set; }
    //public class EnumLevels
    //{
    //    public Level EnumValue { get; set; }
    //    public string EnumName { get; set; }
    //}
    //List<EnumLevels> MyLevels { get; set; } = new List<EnumLevels>();

    private CategoryCreateRequest category = new CategoryCreateRequest();
    private List<CategoryDTO> categories;

    //xử lí ảnh
    [Parameter]
    public string ImgUrl { get; set; }
    public string FirstFile;
    private bool stateChanged = false;
    private bool isSave = false;
    private int count = 0;

    protected override async Task OnInitializedAsync()
    {
        categories = await _categoryService.GetListCategory();
        ImgUrl = "/img/empty.jpg";
        // load the list
        //foreach (Level item in Enum.GetValues(typeof(Level)))
        //{
        //    MyLevels.Add(new EnumLevels { EnumName = item.ToString(), EnumValue = item });
        //}
    }

    async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var imageFile in imageFiles)
        {
            if (imageFile != null)
            {
                var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);
                using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(ms.Length)), "UploadFiles", imageFile.Name);

                    //chỉ xoá file nếu img thay đổi lần 2
                    if (!string.IsNullOrEmpty(ImgUrl) && stateChanged)
                        await _categoryService.DeleteCategoryImage(ImgUrl);

                    var response = await _categoryService.UploadCategoryImage(content);
                    category.IconFile = ImgUrl = response.loadPathFile;

                    //kiểm tra file đã thay đổi hay chưa nếu thay đổi rồi thì save lại
                    stateChanged = true;
                    ++count;

                    //reset trạng thái save filechange file
                    isSave = false;
                }
            }
        }
    }

    async Task Createcategory()
    {
        category.IconFile = ImgUrl;
        //nếu file có sự thay đổi thì xoá file củ
        //sau khi lưu lần 1 file ban đầu đã bị xoá cần lưu lại giá trị file mới
        //FirstFile = ImgUrl;
        if (!string.IsNullOrEmpty(FirstFile))
        {
            if (stateChanged && count > 0)
            {
                await _categoryService.DeleteCategoryImage(FirstFile);
            }
        }
        //lưu trạng thái save file
        isSave = true;
        //reset trạng thái
        stateChanged = false;
        count = 0;
        //ghi lại file vừa mới lưu
        FirstFile = category.IconFile;
        var result = await _categoryService.CreateCategory(category);
        if (result)
        {
            Console.WriteLine("OK");
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Thông báo sự kiện",
                    Detail = "Thêm thành công",
                    Duration = 4000,
                });
            uriHelper.NavigateTo("/category");
        }
        else
        {
            Console.WriteLine(JsonSerializer.Serialize(category, new JsonSerializerOptions() { WriteIndented = true }));
        }
    }
    void Back()
    {
        //đổi file nhưng mà chưa save lại thì xoá đi file đó để tránh rác
        // cách này chỉ áp dụng cho lần đầu
        if (stateChanged && !isSave)
        {
            _categoryService.DeleteCategoryImage(ImgUrl);
        }
        uriHelper.NavigateTo("category");
    }
}
