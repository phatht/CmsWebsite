@page "/category/edit/{categoryId:long}"
@using CmsWebsite.Client.Blazor.Services.Category
@using System.Text.Json
@using CmsWebsite.Share.Models.Category
@inject NavigationManager uriHelper
@inject ICategoryService _client
@inject NotificationService NotificationService
<h3>Edit category</h3>

@*
    TItem: truyền 1 class, đối tượng request để hiển thị dữ liệu
    Data: truyền 1 biến object để bind dữ liệu
    Submit: truyền 1 function
*@

<RadzenTemplateForm TItem="CategoryDTO" Data="@existingCategory" Submit=@Update>
    <div class="row">
        <RadzenFieldset>
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="ImageFile" Text="ImageFile" />
                </div>
                <div class="col-md-9">
                    <RadzenFileInput TValue="string" @bind-Value="@existingCategory.IconFile" Class="w-100" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="CategoryName" Text="Category Name" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox Name="CategoryName" @bind-Value="@existingCategory.CategoryName" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="Abbreviation" Text="Abbreviation" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox Name="Abbreviation" @bind-Value="@existingCategory.Abbreviation" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="ParentCategoryId" Text="Parent Category" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDown Name="ParentCategoryId" AllowClear="true" Data="@categories" TextProperty="CategoryName" ValueProperty="CategoryId"
                                    @bind-Value=@existingCategory.ParentCategoryId Placeholder="Select Parent..." />

                </div>
            </div>
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="Level" Text="Level" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDown Name="Level" Data="@MyLevels" TextProperty="EnumName" ValueProperty="EnumValue"
                                     @bind-Value=@existingCategory.Level Placeholder="Select Level..." />

                </div>
            </div>

            <div class="row align-items-end justify-content-center">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
            </div>
        </RadzenFieldset>
    </div>
</RadzenTemplateForm>

@code {
    //[Inject] private IcategoryService _client { get; set; }
    public class EnumLevels
    {
        public Level EnumValue { get; set; }
        public string EnumName { get; set; }
    }
    List<EnumLevels> MyLevels { get; set; } = new List<EnumLevels>();

    private CategoryDTO existingCategory { get; set; } = new CategoryDTO();

    private List<CategoryDTO> categories { get; set; } = new List<CategoryDTO>();

    [Parameter]
    public long categoryId { set; get; }


    protected async override Task OnParametersSetAsync()
    {
        //Console.WriteLine(JsonSerializer.Serialize(existingCategory, new JsonSerializerOptions() { WriteIndented = true }));
        existingCategory = await _client.GetCategory(categoryId);
        categories = await _client.GetListCategory();
        // load the list
        foreach (Level item in Enum.GetValues(typeof(Level)))
        {
            MyLevels.Add(new EnumLevels { EnumName = item.ToString(), EnumValue = item });
        }
    }

    async Task Update()
    {
        Console.WriteLine(JsonSerializer.Serialize(existingCategory, new JsonSerializerOptions() { WriteIndented = true }));

        //var result = await _client.UpdateCategory(categoryId, existingCategory);
        //if (result)
        //{
        //    NotificationService.Notify(new NotificationMessage
        //        {
        //            Severity = NotificationSeverity.Success,
        //            Summary = "Thông báo sự kiện",
        //            Detail = "Cập nhật thành công",
        //            Duration = 4000,
        //        });
        //    uriHelper.NavigateTo("/category");
        //}
        //else
        //{
        //    Console.WriteLine(JsonSerializer.Serialize(existingCategory, new JsonSerializerOptions() { WriteIndented = true }));
        //}
    }
}
