@page "/article/create"
@using CmsWebsite.Share.Models.Article
@using System.Text.Json
@inject NavigationManager uriHelper
@inject CmsWebsite.Client.Blazor.Services.IArticleService _client
@inject NotificationService NotificationService
<h3>Create</h3>
@*
    TItem: truyền 1 class, đối tượng request để hiển thị dữ liệu
    Data: truyền 1 biến object để bind dữ liệu
    Submit: truyền 1 function
*@
<RadzenTemplateForm TItem="Article" Data="@article" Submit=@CreateArticle>
    <p>
        <RadzenLabel Component="ImageFile" Text="ImageFile" />
        <RadzenFileInput TValue="string" @bind-Value="@article.ImageFile" Class="w-100" />
    </p><p>
        <RadzenLabel Component="Title" Text="Title" />
        <RadzenTextBox Name="Title" @bind-Value="@article.Title" />
    </p>
    <p>
        <RadzenLabel Component="Description" Text="Description" />
        <RadzenTextBox Name="Description" @bind-Value="@article.Description" />
    </p>
    <p>
        <RadzenLabel Component="SummaryArticle" Text="Summary Article" />
        <RadzenTextBox Name="SummaryArticle" @bind-Value="@article.SummaryArticle" />
    </p>
    <p>
        <RadzenLabel Component="KeyWords" Text="KeyWords" />
        <RadzenTextBox Name="KeyWords" @bind-Value="@article.KeyWords" />
    </p>
    <p>
        <RadzenLabel Component="SubHead" Text="SubHead" />
        <RadzenTextBox Name="SubHead" @bind-Value="@article.SubHead" />
    </p>
    <p>
        <RadzenDatePicker @bind-Value=@article.PublishDate TValue="DateTime" ShowTime="true" ShowSeconds="true"
                          HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm">
            <FooterTemplate>
                <RadzenButton Click=@OnTodayClick Text="Today" />
            </FooterTemplate>
        </RadzenDatePicker>
        <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
    </p>
</RadzenTemplateForm>

@code {
    //[Inject] private IArticleService _client { get; set; }
    Article article = new Article()
        {
            PublishDate = DateTime.Now,
        };
    private List<ArListDTO> Articles;
    protected override async Task OnInitializedAsync()
    {

    }
    async Task CreateArticle()
    {
        article.UserId = "string";
        var result = await _client.CreateArticle(article);
        if (result)
        {
            Console.WriteLine("OK");
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thông báo sự kiện", Detail = "Thêm thành công", Duration = 4000 });
            uriHelper.NavigateTo("/article");
        }
        else
        {
            Console.WriteLine(JsonSerializer.Serialize(article, new JsonSerializerOptions() { WriteIndented = true }));
        }
    }
    //void OnChange(string value, string name)
    //{
    //}

    //void OnError(UploadErrorEventArgs args, string name)
    //{
    //}

    void OnTodayClick()
    {
        article.PublishDate = DateTime.Now;
    }
}
