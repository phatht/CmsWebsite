@page "/article/create"
@using CmsWebsite.Client.Blazor.Services.Article
@using CmsWebsite.Client.Blazor.Services.Category
@using CmsWebsite.Client.Blazor.Services.ArticleCategory

@using CmsWebsite.Share.Models.Article
@using CmsWebsite.Share.Models.ArticleCategory
@using CmsWebsite.Share.Models.Category

@using System.Text.Json
@using System.Net.Http.Headers


@inject NavigationManager uriHelper

@*Service*@
@inject IArticleService _articleService
@inject ICategoryService _categoryService
@inject IArticleCategoryService _acService
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>Create Article</h3>
@*
    TItem: truyền 1 class, đối tượng request để hiển thị dữ liệu
    Data: truyền 1 biến object để bind dữ liệu
    Submit: truyền 1 function
*@

<RadzenTemplateForm TItem="ArticleCreateRequest" Data="@article" Submit=@CreateArticle>
    <div class="row">
        <RadzenFieldset>

            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="Title" Text="Title" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox Name="Title" @bind-Value="@article.Title" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="Description" Text="Description" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox Name="Description" @bind-Value="@article.Description" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="SummaryArticle" Text="Summary Article" />
                </div>
                <div class="col-md-9">
                    <RadzenHtmlEditor Name="SummaryArticle" @bind-Value=@article.SummaryArticle
                                      style="height: 500px; margin-bottom: 1rem;" UploadUrl=@(uploadPath)
                                      Change=@OnChange Paste=@OnPaste Execute=@OnExecute>
                    </RadzenHtmlEditor>
                </div>
            </div>


            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="KeyWords" Text="KeyWords" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox Name="KeyWords" @bind-Value="@article.KeyWords" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="SubHead" Text="SubHead" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox Name="SubHead" @bind-Value="@article.SubHead" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="Categories" Text="Categories" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDown AllowClear=true Name="Level" Data="@Categories" TextProperty="CategoryName" ValueProperty="CategoryId"
                                    @bind-Value=@ac.CategoryID Placeholder="Select Category..." />

                </div>
            </div>

            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="PublishDate" Text="PublishDate" />
                </div>
                <div class="col-md-9">
                    <RadzenDatePicker @bind-Value=@article.PublishDate TValue="DateTime" ShowTime="true" ShowSeconds="true"
                                      HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm">
                        <FooterTemplate>
                            <RadzenButton Click=@OnTodayClick Text="Today" />
                        </FooterTemplate>
                    </RadzenDatePicker>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 align-items-center d-flex">
                    <RadzenLabel Component="ImageFile" Text="ImageFile" />
                </div>
                <div class="col-md-9">
                    <RadzenImage Path=@($"{ImgUrl}") Style="width: 300px; height: 300px; border: black solid 0.5px " />
                    <InputFile OnChange="@HandleSelected" accept=".jpg, .jpeg, .png" />

                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-3  d-flex align-items-end justify-content-center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Style="display: inline-block; margin-left: 10px;" ButtonType="ButtonType.Button" Click=@Back Text="Back" />
                </div>
            </div>
        </RadzenFieldset>
    </div>
</RadzenTemplateForm>

@code {
    private ArticleCreateRequest article = new ArticleCreateRequest()
        {
            PublishDate = DateTime.Now.AddHours(1)
        };

    private ArticleCategoryRequest ac = new ArticleCategoryRequest();

    private List<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

    //#region Process ImageFile Variables
    [Parameter]
    public string ImgUrl { get; set; }
    public string FirstFile;
    private bool stateChanged = false;
    private bool isSave = false;
    private int count = 0;

    public string uploadPath;

    protected override async Task OnInitializedAsync()
    {
        article.UserId = await getUserId();
        Categories = await _categoryService.GetListCategory();
        uploadPath = $"api/File/Upload?subDirectory=articles";
    }


    async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var imageFile in imageFiles)
        {
            if (imageFile != null)
            {
                var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);
                using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(ms.Length)), "file", imageFile.Name);

                    //chỉ xoá file nếu img thay đổi lần 2
                    if (!string.IsNullOrEmpty(ImgUrl) && stateChanged)
                        await _articleService.DeleteArticleImage(ImgUrl);

                    var response = await _articleService.UploadArticleImage(content);
                    ImgUrl = response;
                    //Console.WriteLine(JsonSerializer.Serialize(response, new JsonSerializerOptions() { WriteIndented = true }));

                    //kiểm tra file đã thay đổi hay chưa nếu thay đổi rồi thì save lại
                    stateChanged = true;
                    ++count;

                    //reset trạng thái save filechange file
                    isSave = false;
                }
            }
        }
    }

    async Task CreateArticle()
    {
        //Console.WriteLine(JsonSerializer.Serialize(article, new JsonSerializerOptions() { WriteIndented = true }));
        article.ImageFile = ImgUrl;
        //nếu file có sự thay đổi thì xoá file củ
        //sau khi lưu lần 1 file ban đầu đã bị xoá cần lưu lại giá trị file mới
        //FirstFile = ImgUrl;
        if (!string.IsNullOrEmpty(FirstFile))
        {
            if (stateChanged && count > 0)
            {
                await _articleService.DeleteArticleImage(FirstFile);
            }
        }
        //lưu trạng thái save file
        isSave = true;
        //reset trạng thái
        stateChanged = false;
        count = 0;
        //ghi lại file vừa mới lưu
        FirstFile = article.ImageFile;
        var newArticle = await _articleService.CreateArticle(article);
        if (newArticle != null)
        {
            ac.ArticleID = newArticle;
            var result = await _acService.CreateArticleCategory(ac);
            if (result)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Thông báo sự kiện",
                        Detail = "Thêm thành công",
                        Duration = 4000,
                    });
                uriHelper.NavigateTo("/article");
            }
            else
            {
                Console.WriteLine(JsonSerializer.Serialize(result, new JsonSerializerOptions() { WriteIndented = true }));
            }
        }
        else
        {
            Console.WriteLine(JsonSerializer.Serialize(article, new JsonSerializerOptions() { WriteIndented = true }));
        }
    }
    void OnTodayClick()
    {
        article.PublishDate = DateTime.Now;
    }
    async Task<string> getUserId()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        return user.FindFirst(u => u.Type.Contains("UserId"))?.Value;
    }
    void Back()
    {
        //đổi file nhưng mà chưa save lại thì xoá đi file đó để tránh rác
        // cách này chỉ áp dụng cho lần đầu
        if (stateChanged && !isSave)
        {
            _articleService.DeleteArticleImage(ImgUrl);
        }
        uriHelper.NavigateTo("article");
    }


    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");
    }
}
