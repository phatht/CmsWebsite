@page "/article/create"


@using CmsWebsite.Client.Blazor.Services.Article
@using CmsWebsite.Client.Blazor.Services.Category
@using CmsWebsite.Client.Blazor.Services.ArticleCategory

@using CmsWebsite.Share.Models.Article
@using CmsWebsite.Share.Models.ArticleCategory
@using CmsWebsite.Share.Models.Category

@using System.Text.Json
@using System.Net.Http.Headers


@inject NavigationManager uriHelper

@*Service*@
@inject IArticleService _articleService
@inject ICategoryService _categoryService
@inject IArticleCategoryService _acService
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient


@*
    TItem: truyền 1 class, đối tượng request để hiển thị dữ liệu
    Data: truyền 1 biến object để bind dữ liệu
    Submit: truyền 1 function
*@
<div class="container-fluid">
    <div class="row">
        <RadzenTemplateForm TItem="ArticleCreateRequest" Data="@article" Submit=@CreateArticle>
            <DataAnnotationsValidator />
            @*<ValidationSummary/>*@
            <div class="row">
                <div class="col-md-6">
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="KeyWords" Text="Tác giả: " />
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox Name="KeyWords" @bind-Value="@article.Author" Placeholder="Tác giả bài viết..."
                                           Style="width:100%;" />

                        </div>
                    </div>
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="KeyWords" Text="Từ khoá SEO" />
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox Name="KeyWords" @bind-Value="@article.KeyWords" Placeholder="Từ khoá SEO cho bài viết..."
                                           Style="width:100%;" />

                        </div>
                    </div>
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="Title" Text="Tiêu đề: " />
                        </div>
                        <div class="col-md-9">
                            @*<RadzenTextBox Name="Title" @bind-Value="@article.Title" />*@
                            <RadzenTextArea Rows="5" @bind-Value="@article.Title" MaxLength="500" Placeholder="Nhập tiêu đề bài viết.."
                                            Style="width:100%;" />
                            <ValidationMessage For="@(() => article.Title)" />
                        </div>
                    </div>
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="SubHead" Text="Tiêu đề phụ: " />
                        </div>
                        <div class="col-md-9">
                            @*<RadzenTextBox Name="SubHead" @bind-Value="@article.SubHead" Placeholder="Tiêu đề phụ bài viết(SEO)..." Style="width:100%;" />*@
                            <RadzenTextArea Rows="2" @bind-Value="@article.SubHead" MaxLength="500" Placeholder="Tiêu đề phụ bài viết(SEO)..."
                                            Style="width:100%;" />

                        </div>
                    </div>
                    
                    

                </div>
                <div class="col-md-6">
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="Description" Text="Mô tả: " />
                        </div>
                        <div class="col-md-9">
                            @*<RadzenTextBox Name="Description" @bind-Value="@article.Description"  />*@
                            <RadzenTextArea Rows="5" @bind-Value="@article.Description" MaxLength="500" Placeholder="Tóm tắt bài viết"
                                            Style="width:100%;" />

                            <ValidationMessage For="@(() => article.Description)" />
                        </div>
                    </div>
                    <div class="row justify-content-center my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="Categories" Text="Loại bài viết: " />
                        </div>
                        <div class="col-md-9">
                            <RadzenDropDown AllowClear=true Name="Categories" Data="@Categories" TextProperty="CategoryName" ValueProperty="CategoryId"
                                            @bind-Value=@ac.CategoryID Placeholder="Bài viết thuộc loại..."
                                            Style="width:100%;" />

                        </div>
                    </div>
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="PublishDate" Text="Chọn ngày xuất bản: " />
                        </div>
                        <div class="col-md-9">
                            <RadzenDatePicker @bind-Value=@article.PublishDate TValue="DateTime" ShowTime="true" ShowSeconds="true"
                                              HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Style="width:100%;">
                                <FooterTemplate>
                                    <RadzenButton Click=@OnTodayClick Text="Hôm nay" />
                                </FooterTemplate>
                            </RadzenDatePicker>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row my-3">
                <div class="col-md-2 align-items-center d-flex">
                    <RadzenLabel Component="SummaryArticle" Text="Nội dung: " />
                </div>
                <div class="col-md-10">
                    <RadzenHtmlEditor @bind-Value="article.SummaryArticle" UploadUrl="@uploadPath" style="height: 400px; margin-bottom: 1rem; width:100%;"></RadzenHtmlEditor>
                    <ValidationMessage For="@(() => article.SummaryArticle)" />
                </div>
            </div>
            <div class="row my-3">
                <div class="col-md-2 align-items-center d-flex">
                    <RadzenLabel Component="ImageFile" Text="Ảnh đại diện bài viết: " />
                </div>
                <div class="col-md-10">
                    <RadzenImage Path="@ImgUrl" Style="max-width: 70%; max-height: 70%; display: block; margin-bottom: 5px;" />
                    <InputFile OnChange="@HandleSelected" accept=".jpg, .jpeg, .png" />
                    <ValidationMessage For="@(() => article.ImageFile)" />
                       
                </div>
            </div>
            <div class="row my-3">
                <div class="col-md-2 align-items-center d-flex">
                    <RadzenLabel Component="ImageFile" Text="Video bài viết: " />
                </div>
                <div class="col-md-10">
                    @if (VideoUrl != null)
                    {
                        <div style="width: 100%; padding-top: 56.25%; height: 0px; position: relative; margin-bottom: 5px;">
                            <video id="videoArticle" controls style="width: 100%; height: 100%; position: absolute; top: 0; left: 0;">
                                <source src="@VideoUrl" type="video/mp4">not supported.
                            </video>
                        </div>
                    }
                    <InputFile OnChange="@HandleFiles" accept=".mp4" />
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-3  d-flex align-items-end justify-content-center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Lưu" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Style="display: inline-block; margin-left: 10px;" ButtonType="ButtonType.Button" Click=@Back Text="Trở về" />
                </div>
            </div>
        </RadzenTemplateForm>
    </div>
</div>
@code {
    private ArticleCreateRequest article = new ArticleCreateRequest()
        {
            PublishDate = DateTime.Now,
        };

    private ArticleCategoryRequest ac = new ArticleCategoryRequest();

    private List<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

    //#region Process ImageFile Variables
    [Parameter]
    public string ImgUrl { get; set; }
    public string firstFile;
    private bool stateChanged = false;
    private bool isSave = false;
    private int count = 0;
    private int countHtmlEditor = 0;
    public string uploadPath;

    [Parameter]
    public string VideoUrl { get; set; }
    public string videoFile;
    public bool changeVideo = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = HttpClient.BaseAddress;
        uploadPath = $"{uri}api/file/uploadimageeditor";
        var userInfor = await getCurrentUser();
        article.UserId = userInfor.Id;
        article.Author = userInfor.FullName;
        Categories = await _categoryService.GetListCategory();
        ImgUrl = "/img/empty.jpg";

    }

    async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var imageFile in imageFiles)
        {
            if (imageFile != null)
            {
                //var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);
                using (var ms = imageFile.OpenReadStream(imageFile.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(ms.Length)), "UploadFiles", imageFile.Name);

                    //chỉ xoá file nếu img thay đổi lần 2
                    if (!string.IsNullOrEmpty(ImgUrl) && stateChanged)
                        await _articleService.DeleteArticleFile(ImgUrl);

                    var response = await _articleService.UploadArticleFile(content);
                    article.ImageFile = ImgUrl = response.loadPathFile;
                    //Console.WriteLine(JsonSerializer.Serialize(response, new JsonSerializerOptions() { WriteIndented = true }));

                    //kiểm tra file đã thay đổi hay chưa nếu thay đổi rồi thì save lại
                    stateChanged = true;
                    ++count;

                    //reset trạng thái save filechange file
                    isSave = false;
                }
            }
        }
    }

    async Task HandleFiles(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 1024;
        using var content = new MultipartFormDataContent();
        foreach (var file in e.GetMultipleFiles())
        {
            if (file != null)
            {
                var trustedFileName = file.Name;
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                content.Add(fileContent, "UploadFiles", trustedFileName);

                //chỉ xoá file nếu file thay đổi lần 2
                if (!string.IsNullOrEmpty(VideoUrl) && changeVideo)
                    await _articleService.DeleteArticleFile(VideoUrl);

                var response = await _articleService.UploadArticleFile(content);
                article.Video = VideoUrl = response.loadPathFile;
                if (changeVideo)
                    await JSRuntime.InvokeVoidAsync("loadVideo");
                //Console.WriteLine(response);
                //kiểm tra file đã thay đổi hay chưa nếu thay đổi rồi thì save lại
                changeVideo = true;
                ++count;

                //reset trạng thái save filechange file
                isSave = false;
            }
        }
    }

    async Task CreateArticle()
    {
        article.ImageFile = ImgUrl;
        article.Video = VideoUrl;
        //nếu file có sự thay đổi thì xoá file củ
        //sau khi lưu lần 1 file ban đầu đã bị xoá cần lưu lại giá trị file mới
        //FirstFile = ImgUrl;
        if (!string.IsNullOrEmpty(firstFile) && !string.IsNullOrEmpty(videoFile))
        {
            if (stateChanged && changeVideo && count > 0)
            {
                await _articleService.DeleteArticleFile(firstFile);
                await _articleService.DeleteArticleFile(videoFile);
            }
        }
        //lưu trạng thái save file
        isSave = true;
        //reset trạng thái
        stateChanged = false;
        changeVideo = false;
        count = 0;
        //ghi lại file vừa mới lưu
        firstFile = article.ImageFile;
        videoFile = article.Video;
        var newArticle = await _articleService.CreateArticle(article);
        if (newArticle != null)
        {
            ac.ArticleID = newArticle;
            var result = await _acService.CreateArticleCategory(ac);
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Thông báo sự kiện",
                    Detail = "Thêm thành công",
                    Duration = 4000,
                });
            uriHelper.NavigateTo("/article");
        }

    }
    void OnTodayClick()
    {
        article.PublishDate = DateTime.Now;
    }
    //void NextDay()
    //{
    //    article.ExpireDate = DateTime.Now.AddDays(1);
    //}
    //void NextWeek()
    //{
    //    article.ExpireDate = DateTime.Now.AddDays(7);
    //}
    //void NextMonth()
    //{
    //    article.ExpireDate = DateTime.Now.AddMonths(1);
    //}
    async Task<CurrentUser> getCurrentUser()
    {
        var claimsPrincipal = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        CurrentUser user = new CurrentUser()
            {
                Id = claimsPrincipal.FindFirst(u => u.Type.Contains("UserId"))?.Value,
                FullName = claimsPrincipal.FindFirst(u => u.Type.Contains("FullName"))?.Value,
            };
        return user;
    }
    void Back()
    {
        //đổi file nhưng mà chưa save lại thì xoá đi file đó để tránh rác
        // cách này chỉ áp dụng cho lần đầu
        if (stateChanged && changeVideo && !isSave)
        {
            _articleService.DeleteArticleFile(ImgUrl);
            _articleService.DeleteArticleFile(VideoUrl);
        }
        uriHelper.NavigateTo("article");
    }
    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        //console.Log($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        //console.Log($"Change: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        //console.Log($"Execute: {args.CommandName}");
    }
}
