@page "/article"
@using CmsWebsite.Client.Blazor.Services.Article
@using CmsWebsite.Share.Models.Article
@using System.Text.Json
@inject IArticleService _client
@inject NavigationManager uriHelper
@inject DialogService DialogService
@inject NotificationService NotificationService

@if (Articles is null)
{
    <p> Loading Articles</p>
}
else
{
    <div class="container-fluid">
        <div class="row mb-3">
            <div class="col">
                <RadzenButton Click=@(arg => uriHelper.NavigateTo("article/create")) Text="Thêm bài viết" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
            </div>
        </div>
        <div class="">
            <RadzenDataGrid @ref="grid0" AllowFiltering="true" AllowColumnResize="true"
                        FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="7"
                        AllowPaging="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        ShowPagingSummary="true"
                        Data="@Articles" TItem="ArticleDTO" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="ArticleDTO" Title="Photo" Width="80px">
                        <Template Context="data">
                            <RadzenImage Path="@($"{data.ImageFile}")" style="width: 70px; height: 70px; border-radius: 8px;" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ArticleDTO" Property="Title"
                                      Title="Tiêu đề" Width="140px" />
                    <RadzenDataGridColumn TItem="ArticleDTO" Property="Author"
                                      Title="Tác giả" Width="140px" />
                    <RadzenDataGridColumn TItem="ArticleDTO" Property="PublishDate"
                                      Title="Ngày đăng bài" Width="140px" FormatString="{0:d}" />
                    <RadzenDataGridColumn TItem="ArticleDTO" Filterable="false" Property="NumberOfViews"
                                      Title="Lượt xem" Width="140px" />
                    <RadzenDataGridColumn Width="140px" Filterable="false" TItem="ArticleDTO" Property="isDeleted"
                                      Title="Tạm ẩn">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=@data.isDeleted Name="isDeleted" TValue="bool"
                                        Change="@((args) => IsDeleted(data.ArticleID, args))" />
                            <RadzenLabel Text="Tạm ẩn" Component="isDeleted" Style="margin-left: 8px; vertical-align: middle;" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ArticleDTO" Filterable="false" Sortable="false" Property="Edit" TextAlign="TextAlign.Center" Width="120px">
                        <Template Context="data">
                            <RadzenButton Class="m-1" ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="edit"
                                      Click="@((args) => EditRow(data.ArticleID))" @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
}







@code {
    protected List<ArticleDTO> Articles { get; set; }
    protected RadzenDataGrid<ArticleDTO> grid0;
    protected override async Task OnInitializedAsync()
    {
        Articles = await _client.GetListArticle();
    }
    protected void EditRow(Guid id) => uriHelper.NavigateTo($"article/edit/{id}");
    protected async Task IsDeleted(Guid id, bool isDeleted)
    {

        try
        {
            var deleted = await _client.DeleteArticle(id, isDeleted);
            var deletedMessage = (isDeleted) ? "Ẩn" : "Hiển thị";
            if (deleted)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Thông báo sự kiện",
                        Detail = $"{deletedMessage} bài viết!",
                        Duration = 2000,
                    });
            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Thông báo sự kiện",
                    Detail = $"{ex}",
                    Duration = 4000
                });
        }
    }
    #region DeleteRow Example
    //protected async Task DeleteRow(long id)
    //{
    //    try
    //    {
    //        var confirmed = await DialogService.Confirm(
    //           "Bạn có chắc muốn xoá?", "Xoá bài viết", options: new ConfirmOptions()
    //               {
    //                   OkButtonText = "Đồng ý",
    //                   CancelButtonText = "Không"
    //               });
    //        if (confirmed == true)
    //        {
    //            var result = await _client.DeleteArticle(id);
    //            if (result != null)
    //            {
    //                var itemToRemove = Articles.Single(r => r.ArticleID == id);
    //                Articles.Remove(itemToRemove);
    //                await grid0.Reload();
    //                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thông báo sự kiện", Detail = "Đã xoá thành công", Duration = 4000 });
    //            }
    //        }
    //    }
    //    catch (System.Exception exception)
    //    {
    //        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Thông báo sự kiện", Detail = $"{exception}", Duration = 4000 });
    //    }
    //}
    #endregion
}
