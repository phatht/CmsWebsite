@page "/article/edit/{articleId:long}"

@using CmsWebsite.Client.Blazor.Services.Article
@using CmsWebsite.Client.Blazor.Services.ArticleCategory
@using CmsWebsite.Client.Blazor.Services.Category
@using CmsWebsite.Share.Models.Article
@using System.Text.Json
@using System.Net.Http.Headers
@using CmsWebsite.Share.Models.ArticleCategory
@using CmsWebsite.Share.Models.Category

@inject IArticleService _articleService
@inject ICategoryService _categoryService
@inject IArticleCategoryService _acService
@inject NavigationManager uriHelper
@inject NotificationService NotificationService
<div class="container-fluid">
    <div class="row">
        <RadzenTemplateForm TItem="ArticleUpdateRequest" Data="@existingArticle" Submit=@Update>
            <DataAnnotationsValidator />
            @*<ValidationSummary/>*@
            <div class="row">
                <div class="col-md-6">
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="KeyWords" Text="Tác giả: " />
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox Name="KeyWords" @bind-Value="@existingArticle.Author" Placeholder="Tác giả bài viết..."
                                           Style="width:100%;" />

                        </div>
                    </div>
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="KeyWords" Text="Từ khoá SEO" />
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox Name="KeyWords" @bind-Value="@existingArticle.KeyWords" Placeholder="Từ khoá SEO cho bài viết..."
                                           Style="width:100%;" />

                        </div>
                    </div>
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="Title" Text="Tiêu đề: " />
                        </div>
                        <div class="col-md-9">
                            @*<RadzenTextBox Name="Title" @bind-Value="@article.Title" />*@
                            <RadzenTextArea Rows="5" @bind-Value="@existingArticle.Title" MaxLength="500" Placeholder="Nhập tiêu đề bài viết.."
                                            Style="width:100%;" />
                            <ValidationMessage For="@(() => existingArticle.Title)" />
                        </div>
                    </div>
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="SubHead" Text="Tiêu đề phụ: " />
                        </div>
                        <div class="col-md-9">
                            @*<RadzenTextBox Name="SubHead" @bind-Value="@article.SubHead" Placeholder="Tiêu đề phụ bài viết(SEO)..." Style="width:100%;" />*@
                            <RadzenTextArea Rows="2" @bind-Value="@existingArticle.SubHead" MaxLength="500" Placeholder="Tiêu đề phụ bài viết(SEO)..."
                                            Style="width:100%;" />

                        </div>
                    </div>



                </div>
                <div class="col-md-6">
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="Description" Text="Mô tả: " />
                        </div>
                        <div class="col-md-9">
                            @*<RadzenTextBox Name="Description" @bind-Value="@article.Description"  />*@
                            <RadzenTextArea Rows="5" @bind-Value="@existingArticle.Description" MaxLength="500" Placeholder="Tóm tắt bài viết"
                                            Style="width:100%;" />

                            <ValidationMessage For="@(() => existingArticle.Description)" />
                        </div>
                    </div>
                    <div class="row justify-content-center my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="Categories" Text="Loại bài viết: " />
                        </div>
                        <div class="col-md-9">
                            <RadzenDropDown AllowClear=true Name="Categories" Data="@Categories" TextProperty="CategoryName" ValueProperty="CategoryId"
                                            @bind-Value=@ac.CategoryID Placeholder="Bài viết thuộc loại..."
                                            Style="width:100%;" />

                        </div>
                    </div>
                    <div class="row my-3">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Component="PublishDate" Text="Chọn ngày xuất bản: " />
                        </div>
                        <div class="col-md-9">
                            <RadzenDatePicker @bind-Value=@existingArticle.PublishDate TValue="DateTime" ShowTime="true" ShowSeconds="true"
                                              HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Style="width:100%;">
                                <FooterTemplate>
                                    <RadzenButton Click=@OnTodayClick Text="Hôm nay" />
                                </FooterTemplate>
                            </RadzenDatePicker>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row my-3">
                <div class="col-md-2 align-items-center d-flex">
                    <RadzenLabel Component="SummaryArticle" Text="Nội dung: " />
                </div>
                <div class="col-md-10">
                    <RadzenHtmlEditor Style="height: 400px; margin-bottom: 1rem; width:100%;"
                                      Name="SummaryArticle" @bind-Value=@existingArticle.SummaryArticle
                                      UploadUrl="@uploadPath" />
                    <ValidationMessage For="@(() => existingArticle.SummaryArticle)" />
                    @*<RadzenTextBox Name="SummaryArticle" @bind-Value="@article.SummaryArticle" Placeholder="Nội dung của bài viết.."/>*@

                </div>
            </div>
            <div class="row my-3">
                <div class="col-md-2 align-items-center d-flex">
                    <RadzenLabel Component="ImageFile" Text="Ảnh đại diện bài viết: " />
                </div>
                <div class="col-md-10">
                    <RadzenImage Path=@($"{ImgUrl}") Style="max-width: 100%; display: block; margin-bottom: 5px;" />
                    <InputFile OnChange="@HandleSelected" accept=".jpg, .jpeg, .png" />
                    <ValidationMessage For="@(() => existingArticle.ImageFile)" />

                </div>
            </div>
            <div class="row my-3">
                <div class="col-md-2 align-items-center d-flex">
                    <RadzenLabel Component="ImageFile" Text="Video bài viết: " />
                </div>
                <div class="col-md-10">
                    @if (VideoUrl != null)
                    {
                        <video controls width="250" Style="display: block; margin-bottom: 5px;">
                            <source src="@VideoUrl" type="video/mp4">not supported.
                        </video>
                    }
                    <InputFile OnChange="@HandleFiles" accept=".mp4" />
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-3  d-flex align-items-end justify-content-center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Lưu" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Style="display: inline-block; margin-left: 10px;" ButtonType="ButtonType.Button" Click=@Back Text="Trở về" />
                </div>
            </div>
        </RadzenTemplateForm>
    </div>
</div>

@code {
    private ArticleUpdateRequest existingArticle { get; set; } = new ArticleUpdateRequest();
    private ArticleCategoryDTO ac = new ArticleCategoryDTO();
    private List<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    [Parameter]
    public long articleId { set; get; }

    [Parameter]
    public string ImgUrl { get; set; }
    public string firstFile;
    private bool stateChanged = false;
    private bool isSave = false;
    private int count = 0;

    public string uploadPath = "http://localhost:5200/api/file/uploadimageeditor";

    [Parameter]
    public string VideoUrl { get; set; }
    public string videoFile;

    protected async override Task OnParametersSetAsync()
    {
        existingArticle = await _articleService.GetUpdateArticle(articleId);
        Categories = await _categoryService.GetListCategory();
        ac = await _acService.GetArticleCategory(articleId);
        firstFile = ImgUrl = existingArticle.ImageFile;
        videoFile = VideoUrl = existingArticle.Video;
    }
    async Task HandleSelected(InputFileChangeEventArgs e)
    {

        var imageFiles = e.GetMultipleFiles();
        foreach (var imageFile in imageFiles)
        {
            if (imageFile != null)
            {
                var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);
                using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(ms.Length)), "UploadFiles", imageFile.Name);

                    //chỉ xoá file nếu img thay đổi lần 2
                    if (!string.IsNullOrEmpty(ImgUrl) && stateChanged)
                        await _articleService.DeleteArticleFile(ImgUrl);

                    var response = await _articleService.UploadArticleFile(content);
                    ImgUrl = response.loadPathFile;
                    //Console.WriteLine(response);
                    //kiểm tra file đã thay đổi hay chưa nếu thay đổi rồi thì save lại
                    stateChanged = true;
                    ++count;

                    //reset trạng thái save filechange file
                    isSave = false;
                }
            }
        }
    }

    async Task HandleFiles(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 1024;
        using var content = new MultipartFormDataContent();
        foreach (var file in e.GetMultipleFiles())
        {
            if (file != null)
            {
                var trustedFileName = file.Name;
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                content.Add(fileContent, "UploadFiles", trustedFileName);

                //chỉ xoá file nếu file thay đổi lần 2
                if (!string.IsNullOrEmpty(VideoUrl) && stateChanged)
                    await _articleService.DeleteArticleFile(VideoUrl);

                var response = await _articleService.UploadArticleFile(content);
                VideoUrl = response.loadPathFile;
                Console.WriteLine(VideoUrl);
                //Console.WriteLine(response);
                //kiểm tra file đã thay đổi hay chưa nếu thay đổi rồi thì save lại
                stateChanged = true;
                ++count;

                //reset trạng thái save filechange file
                isSave = false;
            }
        }
    }

    async Task Update()
    {
        existingArticle.ImageFile = ImgUrl;
        existingArticle.Video = VideoUrl;
        //nếu file có sự thay đổi thì xoá file củ
        //sau khi lưu lần 1 file ban đầu đã bị xoá cần lưu lại giá trị file mới
        //FirstFile = ImgUrl;
        if (stateChanged && count > 0)
        {
            await _articleService.DeleteArticleFile(firstFile);
            await _articleService.DeleteArticleFile(videoFile);
        }
        //lưu trạng thái save file
        isSave = true;
        //reset trạng thái
        stateChanged = false;
        count = 0;
        //ghi lại file vừa mới lưu
        firstFile = existingArticle.ImageFile;
        videoFile = existingArticle.Video;
        //cập nhật bài viết
        var updateArticle = await _articleService.UpdateArticle(articleId, existingArticle);
        if (updateArticle)
        {
            var result = await _acService.UpdateArticleCategory(articleId, ac);
            if (result)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Thông báo sự kiện",
                        Detail = "Cập nhật thành công",
                        Duration = 4000,
                    });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Thông báo sự kiện",
                        Detail = "Cập nhật thất bại",
                        Duration = 4000,
                    });
            }
        }
        else
        {
            await _articleService.DeleteArticleFile(existingArticle.ImageFile);
            Console.WriteLine(JsonSerializer.Serialize(existingArticle, new JsonSerializerOptions() { WriteIndented = true }));
        }
    }

    void OnTodayClick()
    {
        existingArticle.PublishDate = DateTime.Now;
    }
    async Task Back()
    {
        //đổi file nhưng mà chưa save lại thì xoá đi file đó để tránh rác
        // cách này chỉ áp dụng cho lần đầu
        if (stateChanged && !isSave)
        {
            await _articleService.DeleteArticleFile(ImgUrl);
            await _articleService.DeleteArticleFile(VideoUrl);
        }

        uriHelper.NavigateTo("article");
    }
}
